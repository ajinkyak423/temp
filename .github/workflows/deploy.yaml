name: summon-platform-CI

on:
  push:
  workflow_dispatch:

    
jobs:
  Build-docker-image:
    name: docker_image
    runs-on: ubuntu-latest
    steps:
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.8.15'

      # - name: check for deploy
      #   if: contains(github.event.head_commit.message, 'deploy')
      #   run: |
      #     DEPLOY=$(echo "${{ github.event.head_commit.message }}" | sed -n 's/.*\[deploy:[[:space:]]*\([^]]*\)].*/\1/p')
      #     echo "DEPLOY=$DEPLOY" >> $GITHUB_ENV

      - name: checkout code
        uses: actions/checkout@v4

      # - name: create PR to deploy latest build to tenant
      #   if: env.DEPLOY != null
      #   uses: actions/checkout@v4
      #   with:
      #     repository: ajinkyak423/actions-poc
      #     path: actions-poc
      #     token: ${{ secrets.MY_GITHUB_ACTION_TOKEN }}

      - name: directory
        run: |
            echo "Current directory: $(pwd)"
            ls -ltra
            # python temp.py
            # echo "deploy_tanent_file=${{ env.deploy_tanent_file }}"
            time=$(date)
            echo "time=$time" >> yourfile.txt
            echo "CURRENT_DATE=$(date +'%s')" >> $GITHUB_ENV
            cat yourfile.txt
    
      # - name: update file in poc
      #   if: env.DEPLOY != null    
      #   run: |
      #    postData='{
      #      "ref": "main",
      #      "inputs": {
      #        "TANENT_NAME": "${{ env.DEPLOY }}",
      #        "IMAGE_TAG_VALUE": "1704395230-fd7169ac-jk-car-25367-subscription-addon-mods"
      #      }
      #    }'

      #    curl -X POST \
      #    -d "${postData}" \
      #    -H "Accept: application/vnd.github+json" \
      #    -H "Authorization: Bearer ${{ secrets.MY_GITHUB_ACTION_TOKEN }}" \
      #    -H "X-GitHub-Api-Version: 2022-11-28" \
      #    https://api.github.com/repos/ajinkyak423/actions-poc/actions/workflows/create-pr.yml/dispatches



      - name: Create Pull Request
        id: cpr
        run: |
           git checkout -B ${{ env.CURRENT_DATE }}-auto-deploy
           git config user.email "418982+github-actions[bot]@users.noreply.github.com"
           git config user.name "github-actions[bot]"
           git add .
           git -c author.name=${{ github.actor }} -c author.email=${{ github.actor }}@users.noreply.github.com commit -m "Runner version update"
           # get base branch name (usually master or main) through git command
           BASE=$(git remote show origin | grep HEAD | awk '{print $3}')
           echo "BASE=$BASE"

           postData='{
             "title":"this is title",
             "body":"this is body",
             "head":"${{ env.CURRENT_DATE }}-auto-deploy",
             "base":"main"
           }'
   
           # use curl -w and jq -s to save response and status_code header as one json object
           response=$( curl -L \
           -X POST \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{ secrets.MY_GITHUB_ACTION_TOKEN }}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
           https://api.github.com/repos/${{ github.repository }}/pulls \
           -d "${postData}" \
           -w '{"status_code": "%{http_code}"}' | jq -s )
    
           echo -e "Response body is:\n$response"
   
           status_code=$(echo $response | jq -r '.[1].status_code')
   
           if [ $status_code == '422' ]
           then
             # get reason for PR not being created.
             # (Two jq commands since errors is an array holding json)
             reason=$(echo $response | jq -r '.[0].errors' | jq -r '.[0].message')
             echo "$reason"
             if [[ $reason =~ 'pull request already exists' ]]
             then
                echo "Workflow will not recreate or replace the pull request"
             else
                exit 1
             fi
           elif [ $status_code == '201' ]
           then
             # save pull request url for notification step
             PR_URL=$(echo $response | jq -r ".[0].html_url")
             echo "pullreq_url=$PR_URL" >> $GITHUB_OUTPUT
           else
             echo "Unexpected status code $status_code in create PR API call. Exiting."
             exit 1
           fi